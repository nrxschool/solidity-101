/**
 *  There are many simple utilities required to interact with
 *  Ethereum and to simplify the library, without increasing
 *  the library dependencies for simple functions.
 *
 *  @_section api/utils:Utilities  [about-utils]
 */
export { decodeBase58, encodeBase58 } from "../../src.ts/utils/base58.js";
export { decodeBase64, encodeBase64 } from "../../src.ts/utils/base64.js";
export { concat, dataLength, dataSlice, getBytes, getBytesCopy, hexlify, isBytesLike, isHexString, stripZerosLeft, zeroPadBytes, zeroPadValue } from "../../src.ts/utils/data.js";
export type { BytesLike } from "../../src.ts/utils/data.js";
export { assert, assertArgument, assertArgumentCount, assertNormalize, assertPrivate, isCallException, isError, makeError } from "../../src.ts/utils/errors.js";
export type { ActionRejectedError, BadDataError, BufferOverrunError, CallExceptionAction, CallExceptionError, CallExceptionTransaction, CancelledError, CodedEthersError, ErrorCode, EthersError, InsufficientFundsError, InvalidArgumentError, MissingArgumentError, NetworkError, NonceExpiredError, NotImplementedError, NumericFaultError, OffchainFaultError, ReplacementUnderpricedError, ServerError, TimeoutError, TransactionReplacedError, UnconfiguredNameError, UnexpectedArgumentError, UnknownError, UnsupportedOperationError } from "../../src.ts/utils/errors.js";
export { EventPayload } from "../../src.ts/utils/events.js";
export type { EventEmitterable, Listener } from "../../src.ts/utils/events.js";
export { FetchCancelSignal, FetchRequest, FetchResponse } from "../../src.ts/utils/fetch.js";
export type { FetchGatewayFunc, FetchGetUrlFunc, FetchPreflightFunc, FetchProcessFunc, FetchRetryFunc, GetUrlResponse } from "../../src.ts/utils/fetch.js";
export { FixedNumber } from "../../src.ts/utils/fixednumber.js";
export type { FixedFormat } from "../../src.ts/utils/fixednumber.js";
export { fromTwos, getBigInt, getNumber, getUint, mask, toBeArray, toBeHex, toBigInt, toNumber, toQuantity, toTwos } from "../../src.ts/utils/maths.js";
export type { BigNumberish, Numeric } from "../../src.ts/utils/maths.js";
export { defineProperties, resolveProperties } from "../../src.ts/utils/properties.js";
export { decodeRlp } from "../../src.ts/utils/rlp-decode.js";
export { encodeRlp } from "../../src.ts/utils/rlp-encode.js";
export type { RlpStructuredData, RlpStructuredDataish } from "../../src.ts/utils/rlp.js";
export { formatEther, formatUnits, parseEther, parseUnits } from "../../src.ts/utils/units.js";
export { Utf8ErrorFuncs, toUtf8Bytes, toUtf8CodePoints, toUtf8String } from "../../src.ts/utils/utf8.js";
export type { UnicodeNormalizationForm, Utf8ErrorFunc, Utf8ErrorReason } from "../../src.ts/utils/utf8.js";
export { uuidV4 } from "../../src.ts/utils/uuid.js";
//# sourceMappingURL=index.d.ts.map